import React, {Component, useEffect, useState} from 'react';
import {RouteComponentProps, useParams} from 'react-router';
import {Markdown} from '../common/Markdown';
import {UnControlled as CodeMirror} from 'react-codemirror2';
import 'codemirror/lib/codemirror.css';
import 'codemirror/theme/material.css';
import 'codemirror/mode/yaml/yaml';
import Info from '@mui/icons-material/Info';
import Build from '@mui/icons-material/Build';
import Subject from '@mui/icons-material/Subject';
import Refresh from '@mui/icons-material/Refresh';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import DefaultPage from '../common/DefaultPage';
import * as config from '../config';
import Container from '../common/Container';
import {inject, Stores} from '../inject';
import {useAppDispatch, useAppSelector} from '../store';
import {requestPluginConfig, requestPluginDisplay} from '../store/plugin-actions.ts';
import {IPlugin} from '../types';
import LoadingSpinner from '../common/LoadingSpinner';

type IProps = RouteComponentProps<{id: string}>;

interface IState {
    displayText: string | null;
    currentConfig: string | null;
}

// TODO: finish functional component migration
const PluginDetailView = () => {
    const {id} = useParams();
    const pluginID = parseInt(id as string, 10);
    const dispatch = useAppDispatch();
    const plugins = useAppSelector((state) => state.plugin.items);
    const [ currentConfig, setCurrentConfig ] = useState(null);
    const [ displayText, setDisplayText ] = useState(null);


    const pluginInfo = plugins.filter(plugin => plugin.id !== pluginID);
    const {name, capabilities} = pluginInfo;

// public state: IState = {
//         displayText: null,
//         currentConfig: null,
//     };

    useEffect(() => {
        refreshFeatures();
    }, []);


    const refreshFeatures = () => {
        return Promise.all([ refreshConfigurer(), refreshDisplayer() ]);
    };

    const refreshConfigurer = async () => {

        if (pluginInfo.capabilities.indexOf('configurer') !== -1) {
            const response = dispatch(requestPluginConfig(pluginID));
            setCurrentConfig(response);
        }
    };

    private async refreshFeatures() {
        await this.props.pluginStore.refreshIfMissing(this.pluginID);
        return await Promise.all([this.refreshConfigurer(), this.refreshDisplayer()]);

        if (pluginInfo.capabilities.indexOf('displayer') !== -1) {
            const response = dispatch(requestPluginDisplay(pluginID));
            setDisplayText(response);
        }
    };


        const pluginInfo = this.props.pluginStore.getByIDOrUndefined(this.pluginID);
        if (pluginInfo === undefined) {
            return <LoadingSpinner />;
        }
    return (
            <DefaultPage title={pluginInfo.name} maxWidth={1000}>
            <PanelWrapper name={'Plugin Info'} icon={Info}>
                <PluginInfo pluginInfo={pluginInfo} />
            </PanelWrapper>
                {pluginInfo.capabilities.indexOf('configurer') !== -1 ? (
                <PanelWrapper
                    name={'Configurer'}
                    description={'This is the configuration panel for this plugin.'}
                    icon={Build}
                    refresh={this.refreshConfigurer.bind(this)}>
                    <ConfigurerPanel
                        pluginInfo={pluginInfo}
                        initialConfig={
                            this.state.currentConfig !== null
                                ? this.state.currentConfig
                                : 'Loading...'
                        }
                        save={async (newConfig) => {
                            await this.props.pluginStore.changeConfig(this.pluginID, newConfig);
                            await this.refreshFeatures();
                        }}
                    />
                </PanelWrapper>
            ) : null}{' '}
                {pluginInfo.capabilities.indexOf('displayer') !== -1 ? (
                <PanelWrapper
                    name={'Displayer'}
                    description={'This is the information generated by the plugin.'}
                    refresh={this.refreshDisplayer.bind(this)}
                    icon={Subject}>
                    <DisplayerPanel
                        pluginInfo={pluginInfo}
                        displayText={
                            this.state.displayText !== null
                                ? this.state.displayText
                                : 'Loading...'
                        }
                    />
                </PanelWrapper>
            ) : null}
        </DefaultPage>
    );
};

interface IPanelWrapperProps {
    name: string;
    description?: string;
    refresh?: () => Promise<void>;
    icon?: React.ComponentType;
    children: React.ReactNode;
}

const PanelWrapper = ({
                          name,
                          description,
                          refresh,
                          icon,
                          children,
                      }: IPanelWrapperProps) => {
    const Icon = icon;
    return (
        <div
            style={{
                width: '100%',
                paddingLeft: '16px',
                paddingRight: '16px',
            }}>
            <Container
                style={{
                    display: 'block',
                    width: '100%',
                    margin: '12px 0px',
                }}>
                <Typography variant="h5">
                    {Icon ? (
                        <span>
                            <Icon />
                            &nbsp;
                        </span>
                    ) : null}
                    {name}
                    {refresh ? (
                        <Button
                            style={{float: 'right'}}
                            onClick={() => {
                                refresh();
                            }}>
                            <Refresh />
                        </Button>
                    ) : null}
                </Typography>
                {description ? <Typography variant="subtitle1">{description}</Typography> : null}
                <hr />
                <div className={name.toLowerCase().trim().replace(/ /g, '-')}>{children}</div>
            </Container>
        </div>
    );
};

interface IConfigurerPanelProps {
    pluginInfo: IPlugin;
    initialConfig: string;
    save: (newConfig: string) => Promise<void>;
}

const ConfigurerPanel = ({pluginInfo, initialConfig, save}: IConfigurerPanelProps) => {
    const [ unsavedChanges, setUnsavedChanges ] = useState<string | null>(null);

    return (
        <div>
            <CodeMirror
                value={initialConfig}
                options={{
                    mode: 'yaml',
                    theme: 'material',
                    lineNumbers: true,
                }}
                onChange={(_, _1, value) => {
                    let newConf: string | null = value;
                    if (value === initialConfig) {
                        newConf = null;
                    }
                    setUnsavedChanges(newConf);
                }}
            />
            <br />
            <Button
                variant="contained"
                color="primary"
                fullWidth={true}
                disabled={
                    unsavedChanges === null ||
                    unsavedChanges === initialConfig
                }
                className="config-save"
                onClick={() => {
                    const newConfig = unsavedChanges;
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    save(newConfig!).then(() => {
                        setUnsavedChanges(null);
                    });
                }}>
                <Typography variant="button">Save</Typography>
            </Button>
        </div>
    );
};

interface IDisplayerPanelProps {
    pluginInfo: IPlugin;
    displayText: string;
}

const DisplayerPanel: React.FC<IDisplayerPanelProps> = ({displayText}) => (
    <Typography variant="body2">
        <Markdown>{displayText}</Markdown>
    </Typography>
);

const PluginInfo = ({pluginInfo}: IDisplayerPanelProps) => {
    const {name, author, modulePath, website, license, capabilities, id, token} = pluginInfo;

    return (
            <div style={{wordWrap: 'break-word'}}>
            {name ? (
                <Typography variant="body2" className="name">
                    Name: <span>{name}</span>
                </Typography>
            ) : null}
            {author ? (
                <Typography variant="body2" className="author">
                    Author: <span>{author}</span>
                </Typography>
            ) : null}
            <Typography variant="body2" className="module-path">
                Module Path: <span>{modulePath}</span>
            </Typography>
            {website ? (
                <Typography variant="body2" className="website">
                    Website: <span>{website}</span>
                </Typography>
            ) : null}
            {license ? (
                <Typography variant="body2" className="license">
                    License: <span>{license}</span>
                </Typography>
            ) : null}
            <Typography variant="body2" className="capabilities">
                Capabilities: <span>{capabilities.join(', ')}</span>
            </Typography>
            {capabilities.indexOf('webhooker') !== -1 ? (
                <Typography variant="body2">
                    Custom Route Prefix:{' '}
                    {((url) => (
                        <a
                            href={url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="custom-route">
                            {url}
                        </a>
                    ))(`${config.get('url')}plugin/${id}/custom/${token}/`)}
                </Typography>
            ) : null}
        </div>
    );
};

export default PluginDetailView;
